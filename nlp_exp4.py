# -*- coding: utf-8 -*-
"""NLP_exp4.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1zy7EXIdPoSaVzS9ljhYLtLyla3_dQApz
"""

pip install pyttsx3

pip install gTTS

pip install playsound

pip install pygobject

#text to speech
   
    # Import the gTTS module for text  
    # to speech conversion  
    from gtts import gTTS  
    import os  
   
      
   
      
    # It is a text value that we want to convert to audio  
    text_val = 'This is natural language processing lab four'  
      
    # Here are converting in English Language  
    language = 'en'  
      
    # Passing the text and language to the engine,  
    # here we have assign slow=False. Which denotes  
    # the module that the transformed audio should  
    # have a high speed  
    obj = gTTS(text=text_val, lang=language, slow=False)  
      
    #Here we are saving the transformed audio in a mp3 file named  

    obj.save("TexttoSpeech.mp3")  
      
     
    os.system("TexttoSpeech.mp3")

pip install SpeechRecognition

#speech to text
import speech_recognition as sr

# Initialize recognizer class (for recognizing the speech)
r = sr.Recognizer()

# Reading Audio file as source
# listening the audio file and store in audio_text variable

with sr.AudioFile('/content/TexttoSpeech.wav') as source:
    
    audio_text = r.listen(source)
    
# recoginize_() method will throw a request error if the API is unreachable, hence using exception handling
    try:
        
        # using google speech recognition
        text = r.recognize_google(audio_text)
        print('Converting audio transcripts into text ...')
        print(text)
     
    except:
         print('Sorry.. run again...')

https://www.online-convert.com/result#j=c9660708-213c-48f2-aeda-72109e2197c8

#text to speech
   
    # Import the gTTS module for text  
    # to speech conversion  
    from gtts import gTTS  
    import os  
   
      
   
      
    # It is a text value that we want to convert to audio  
    text_val = 'How are you'  
      
    # Here are converting in English Language  
    language = 'en'  
      
    # Passing the text and language to the engine,  
    # here we have assign slow=False. Which denotes  
    # the module that the transformed audio should  
    # have a high speed  
    obj = gTTS(text=text_val, lang=language, slow=False)  
      
    #Here we are saving the transformed audio in a mp3 file named  

    obj.save("TexttoSpeech1.mp3")  
      
     
    os.system("TexttoSpeech1.mp3")

#speech to text in other language
import speech_recognition as sr

# Initialize recognizer class (for recognizing the speech)
r = sr.Recognizer()

# Reading Audio file as source
# listening the audio file and store in audio_text variable

with sr.AudioFile('/content/TexttoSpeech1.wav') as source:
    
    audio_text = r.listen(source)
    
# recoginize_() method will throw a request error if the API is unreachable, hence using exception handling
    try:
        
        # using google speech recognition
        text = r.recognize_google(audio_text,language = 'ta-IN')
        print('Converting audio transcripts into text ...')
        print(text)
     
    except:
         print('Sorry.. run again...')

#print(“Text: “+r.recognize_google(audio_text, language = “ta-IN”))

pip install pydub

#conversation to text
# importing libraries 
import speech_recognition as sr 
import os 
from pydub import AudioSegment
from pydub.silence import split_on_silence

# create a speech recognition object
r = sr.Recognizer()

# a function that splits the audio file into chunks
# and applies speech recognition
def get_large_audio_transcription(path):
    """
    Splitting the large audio file into chunks
    and apply speech recognition on each of these chunks
    """
    # open the audio file using pydub
    sound = AudioSegment.from_wav(path)  
    # split audio sound where silence is 700 miliseconds or more and get chunks
    chunks = split_on_silence(sound,
        # experiment with this value for your target audio file
        min_silence_len = 500,
        # adjust this per requirement
        silence_thresh = sound.dBFS-14,
        # keep the silence for 1 second, adjustable as well
        keep_silence=500,
    )
    folder_name = "audio-chunks"
    # create a directory to store the audio chunks
    if not os.path.isdir(folder_name):
        os.mkdir(folder_name)
    whole_text = ""
    # process each chunk 
    for i, audio_chunk in enumerate(chunks, start=1):
        # export audio chunk and save it in
        # the `folder_name` directory.
        chunk_filename = os.path.join(folder_name, f"chunk{i}.wav")
        audio_chunk.export(chunk_filename, format="wav")
        # recognize the chunk
        with sr.AudioFile(chunk_filename) as source:
            audio_listened = r.record(source)
            # try converting it to text
            try:
                text = r.recognize_google(audio_listened)
            except sr.UnknownValueError as e:
                print("Error:", str(e))
            else:
                text = f"{text.capitalize()}. "
                print(chunk_filename, ":", text)
                whole_text += text
    # return the text for all chunks detected
    return whole_text

print(get_large_audio_transcription('/content/AUD-20210928-WA0017.wav'))



#song to text:
import speech_recognition as sr

# Initialize recognizer class (for recognizing the speech)
r = sr.Recognizer()

# Reading Audio file as source
# listening the audio file and store in audio_text variable

with sr.AudioFile('/content/1601926988_dua_lipa_feat_dababy_-_levitating-[AudioTrimmer.com].wav') as source:
    
    audio_text = r.listen(source)
    
# recoginize_() method will throw a request error if the API is unreachable, hence using exception handling
    try:
        
        # using google speech recognition
        text = r.recognize_google(audio_text)
        print('Converting audio transcripts into text ...')
        print(text)
     
    except:
         print('Sorry.. run again...')

#print(“Text: “+r.recognize_google(audio_text, language = “ta-IN”))

#8.perform multilingual text to speech

from gtts import gTTS

import os

mytext = 'Hi,Myself Niranjana from Anna university.எனக்கு என் குழந்தைப் பருவம் நினைவிருக்கிறது.నేను ఈసారికి వదిలేస్తాను'



myobj = gTTS(text=mytext, lang='ta', slow=False)

myobj.save("multilingual.mp3")

os.system("mpg321 welcome.mp3")

#speech to text
import speech_recognition as sr

# Initialize recognizer class (for recognizing the speech)
r = sr.Recognizer()

# Reading Audio file as source
# listening the audio file and store in audio_text variable

with sr.AudioFile('/content/nlp_exp4.wav') as source:
    
    audio_text = r.listen(source)
    
# recoginize_() method will throw a request error if the API is unreachable, hence using exception handling
    try:
        
        # using google speech recognition
        text = r.recognize_google(audio_text)
        print('Converting audio transcripts into text ...')
        print(text)
     
    except:
         print('Sorry.. run again...')

#bilingual conversation
#speech to text
import speech_recognition as sr

# Initialize recognizer class (for recognizing the speech)
r = sr.Recognizer()

# Reading Audio file as source
# listening the audio file and store in audio_text variable

with sr.AudioFile('/content/WhatsApp Audio 2021-09-28 at 4.03.31 PM.wav') as source:
    
    audio_text = r.listen(source)
    
# recoginize_() method will throw a request error if the API is unreachable, hence using exception handling
    try:
        
        # using google speech recognition
        text = r.recognize_google(audio_text,language='ta')
        print('Converting audio transcripts into text ...')
        print(text)
     
    except:
         print('Sorry.. run again...')